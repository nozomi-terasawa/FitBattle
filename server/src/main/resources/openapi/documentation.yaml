openapi: "3.0.3"
info:
  title: "FitBattle API"
  description: "FitBattle API"
  version: "1.0.0"
servers:
- url: "https://FitBattle"
paths:
  /api/v1/fitness:
    get:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetFitnessReq"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GetFitnessRes"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GetFitnessRes"
  /api/v1/fitness/save:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveFitnessReq"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SaveFitnessRes"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SaveFitnessRes"
  /api/v1/location/geofence/entry:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntryGeoFenceReq"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EntryGeoFenceRes"
  /api/v1/location/geofence/exit:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExitFeoFenceReq"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ExitGeoFenceRes"
  /api/v1/location/ws:
    get:
      description: ""
      parameters:
      - name: "roomID"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "Connection"
        in: "header"
        required: true
        description: "Websocket Connection parameter"
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        description: "Websocket Upgrade parameter"
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        description: "Websocket Sec-WebSocket-Key parameter"
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /api/v1/passed/get:
    get:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PassedReq"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "integer"
                  format: "int32"
  /api/v1/passed/getAll:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Get all passed"
  /api/v1/user/create:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateReq"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User already exists"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserCreateRes"
  /api/v1/user/delete:
    delete:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User deleted"
  /api/v1/user/login:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginReq"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid email or password"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserLoginRes"
  /api/v1/user/logout:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User logged out"
components:
  schemas:
    GetFitnessReq:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
    SaveFitnessReq:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        calories:
          type: "number"
          format: "float"
        timestamp:
          type: "string"
      required:
      - "timestamp"
    GetFitnessRes:
      type: "object"
      properties:
        success:
          type: "boolean"
        fitness:
          $ref: "#/components/schemas/SaveFitnessReq"
    SaveFitnessRes:
      type: "object"
      properties:
        success:
          type: "boolean"
    EntryGeoFenceReq:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        geoFenceId:
          type: "integer"
          format: "int32"
        entryTime:
          type: "string"
      required:
      - "entryTime"
    MemberInfo:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        iconUrl:
          type: "string"
      required:
      - "name"
      - "iconUrl"
    EntryGeoFenceRes:
      type: "object"
      properties:
        success:
          type: "boolean"
        geoFenceEntryLogId:
          type: "integer"
          format: "int32"
        token:
          type: "string"
        passingMember:
          type: "array"
          items:
            $ref: "#/components/schemas/MemberInfo"
      required:
      - "token"
      - "passingMember"
    ExitFeoFenceReq:
      type: "object"
      properties:
        geoFenceEntryLogId:
          type: "integer"
          format: "int32"
        userId:
          type: "integer"
          format: "int32"
        geoFenceId:
          type: "integer"
          format: "int32"
        exitTime:
          type: "string"
      required:
      - "exitTime"
    ExitGeoFenceRes:
      type: "object"
      properties:
        success:
          type: "boolean"
    PassedReq:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        timestamp:
          type: "string"
      required:
      - "timestamp"
    UserCreateReq:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
      required:
      - "name"
      - "email"
      - "password"
    UserCreateRes:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        token:
          type: "string"
      required:
      - "token"
    UserLoginReq:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
      required:
      - "email"
      - "password"
    UserLoginRes:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        token:
          type: "string"
      required:
      - "name"
      - "token"